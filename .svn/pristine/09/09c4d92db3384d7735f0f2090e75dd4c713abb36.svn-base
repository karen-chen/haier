<template>
  <div :class="['shake_body', isInShakingMode?'':'countdown_body']">
    <div class="top el-row" v-show="!isInShakingMode">
      <div class="text-center el-col el-col-4" v-show="isShowCountbox"><span>{{user_count}}</span>
        <br>参与互动
      </div>
      <div class="el-col el-col-17 el-col-offset-3" v-show="isShowCountbox">
        <div class="top_right">
          <ul v-for="(userItem, index) in user_list" :key="userItem.openid">
            <!--<li class="biandan">-->
            <!--</li>-->
            <li v-bind:class="{biandan: index==0}">
              <img v-bind:src="userItem.head && userItem.head != '/0' ? userItem.head : default_icon" width="200" height="200">
            </li>
          </ul>
        </div>
      </div>
    </div>
    <h2 class="title_h2" v-show="!isInShakingMode"></h2>
    <div class="count_main text-center" v-show="!isInShakingMode">
      <h2 v-show="isShowCountbox">距离下一轮摇奖开始</h2>
      <h3 v-show="!isShowCountbox">{{timer_status_msg}}</h3>
      <div class="count_box" v-show="isShowCountbox">
        <span>{{count_hour}}</span>时
        <span>{{count_min}}</span>分
        <span>{{count_second}}</span>秒
      </div>
    </div>
    <div class="rule_btn" @click="showRuleDlg" v-show="!isInShakingMode"></div>
    <div class="minegift_btn" @click="showQrcodeDlg" v-show="!isInShakingMode"></div>
    <!--摇奖规则弹框-->
    <div class="pop_mask" id="ruleBox" v-show="isShowRule">
      <div class="pop_box rule_box">
        <h3>活动规则</h3>
        <div class="rule_list" v-html="act_rule"></div>
        <div class="off_btn" @click="closeRule">&times;</div>
      </div>
    </div>
    <div class="top el-row" v-show="isInShakingMode">
      <div class="text-center el-col el-col-7"><span>{{user_count}}</span>
        <br>参与互动
      </div>
      <div class="el-col el-col-16 el-col-offset-1">
      <!--<div class="marquee_scroll" >-->
        <!--<h3 v-bind:style="{width: marquee_width + 'px', animation: 'marquee_scroll '+marquee_seconds+'s linear infinite'}" >-->
          <!--<span :key="prizeUser.sid" v-for="prizeUser in prizeUserList">-->
            <!--<span class="pic">-->
              <!--<img :src="prizeUser.head && prizeUser.head != '/0' ? prizeUser.head : default_icon">-->
            <!--</span>-->
            <!--<span class="barrage_box">{{prizeUser.nickname}}  获得{{prizeUser.resourceName}}-->
            <!--</span>-->
          <!--</span>-->
        <!--</h3>-->
      <!--</div>-->
        <transition-group name="list" tag="p" class="marquee_scroll" v-bind:style="{width: marquee_width + 'px'}">
          <h3 :key="prizeUser.sid" v-for="prizeUser in prizeUserList" class="scroll-item">
            <span class="pic">
              <img :src="prizeUser.head && prizeUser.head != '/0' ? prizeUser.head : default_icon">
            </span>
            <span class="barrage_box">{{prizeUser.nickname}}  获得{{prizeUser.resourceName}}
            </span>
          </h3>
        </transition-group>

      </div>
    </div>
    <div class="el-row" v-show="isInShakingMode">
      <div class="text-center el-col el-col-24">
        <div class="title"></div>
      </div>
    </div>
    <div class="el-row" v-show="isInShakingMode">
      <div class="text-center el-col el-col-24">
        摇奖正在进行，一起来摇吧~
      </div>
    </div>
    <div class="el-row" v-show="isInShakingMode">
      <div class="text-center el-col el-col-24">
        <div class="shake_main"><span class="tada"></span></div>
      </div>
    </div>
    <div class="el-row" v-show="false">
      <div class="text-center el-col el-col-24">
        <div class="gifts_title"></div>
      </div>
    </div>
    <div class="gigts_list" v-show="false">
      <div class="el-row">
        <div class="el-col el-col-18">测试自定义code</div>
        <div class="el-col el-col-5 el-col-offset-1">剩余<span>81</span>个</div>
      </div>
    </div>
    <!--未中奖弹框-->
    <div class="pop_mask" id="noWin" v-show="isShowNoPrize">
      <div class="pop_box no_win">
        <h3>未中奖</h3>
        <p>活动最重要的是开心咯！</p>
        <span></span>
        <div class="btn" @click="closeNoPrizeDlg">再来一次</div>
        <div class="off_btn" @click="closeNoPrizeDlg">&times;</div>
      </div>
    </div>
    <!--关注公众号弹框-->
    <div class="pop_mask" id="codeBox" v-show="isShowQrcode">
      <div class="pop_box code_box">
        <h3>请在“海尔电视”公众号<br>
          菜单“我的券”中进行查看</h3>
        <span><img src="../../assets/images/pop_code.jpg"></span>
        <p>长按二维码，即可关注“海尔电视”公众号</p>
        <div class="off_btn" @click="closeQrcodeDlg">&times;</div>
      </div>
    </div>
    <!--中奖弹框-->
    <div class="pop_mask" id="giftBox" v-show="isShowPrize">
      <div class="pop_box gift_box">
        <h3>恭喜你获得<span>{{prize_title}}</span>奖品</h3>
        <p>奖品已自动放入“我的券”中</p>
        <div class="btn" @click="showQrcodeDlg">查看奖品使用说明</div>
        <div class="off_btn" @click="closePrizeDlg">&times;</div>
      </div>
    </div>
    <audio  id="voice_ding" src="static/voice/ding.mp3" style="display: none"></audio>
    <audio  id="voice_kaka" src="static/voice/kaka.mp3" style="display: none"></audio>
  </div>
</template>
<style lang="scss">
@import '../../assets/scss/_mixins.scss';
@import '../../assets/scss/pages/_index.scss';
@import '../../assets/scss/pages/_countdown.scss';
@import '../../assets/scss/pages/_shake.scss';
@import '../../assets/scss/pages/_pop.scss';
.scroll-item {
  display: inline-block;
  /*transition: all 1.5s;*/
}

.list-enter-active {
  /*transition: all 2s linear;*/
  /*transform: translateX(50%) ;*/
  transition: all 2.5s;
}
.list-enter {
  transform: translateX(100%) ;
  transition: all 2.5s;
}

.list-move{
  transition: all 2.5s;
}

.list-leave-active{
  transform: translateX(-100%) ;

  position: absolute;
  transition: all 2s;
}

  .marquee_scroll {
    @include h(70);
    overflow: hidden;
    position: relative;
  }

  .marquee_scroll h3 span{
    display:inline-block;
    *zoom:1;
    vertical-align: middle;
    @include m-r(20);
    &.pic{
      @include m-r(0);
    }
    &.barrage_nickname{
      @include m-r(10);
    }
  }

  .marquee_scroll h3 {
    font-size: 3em;
  @include h(70);
    margin: 0;
  @include lin_hei(70);
  }
/*
  @-moz-keyframes marquee_scroll {
    0%   { -moz-transform: translateX(80%); }
    100% { -moz-transform: translateX(-100%); }
  }
  @-webkit-keyframes marquee_scroll {
    0%   { -webkit-transform: translateX(80%); }
    100% { -webkit-transform: translateX(-100%); }
  }
  @keyframes marquee_scroll {
    0%   {
    -moz-transform: translateX(80%);
    -webkit-transform: translateX(80%);
    transform: translateX(80%);
    }
    100% {
    -moz-transform: translateX(-100%);
    -webkit-transform: translateX(-100%);
    transform: translateX(-100%);
    }
  }
*/
</style>
<script>
import * as config from '@/lib/config'
import * as shake from '@/assets/js/jquery.shake'
import {
  userData,
  getParam,
  getJsSign,
  wxconfig
} from '@/lib/tools';

export default {
  data() {
    return {
      act_rule: "",
      default_icon: config.default_icon,
      count_hour: 0,
      count_min: 0,
      count_second: 59,
      user_list: [],
      user_count: 0,
      prize_user_refresh_interval: 7000,
      user_refresh_interval: 6000,
      timer_refresh_interval: 13000,
      actSid: "",
      timerSid: "",
      share_info: {},
      isShowRule: false,
      t_icon: null,
      t_addUser: null,
      t_countdown: null,
      t_timer: null,
      intDiff: 30000,
      isShowCountbox: false,
      isShowQrcode: false,
      isShowNoPrize: false,
      isShowPrize: false,
      isShaking: false,
      t_prizeUserList: null,
      prizeUserList: [],
      isInShakingMode: false,
      prize_title: "",
      timer_status_msg: "",
      user_roll_arr:[],
      marquee_width:600,
      marquee_seconds:50,
      prize_roll_arr:[],
      prize_user_refreshed:false
    }
  },
  created() {

    //拒绝分享
    getJsSign(function(sign) {
      wxconfig(sign);
    });
    wx.ready(function() {
      wx.hideAllNonBaseMenuItem();
    });

    this.actSid = getParam("actSid");

    if (!this.actSid) {
      alert("Invalid parameter.");
      return;
    }

    this.initPage();

    this.refreshTimer();
    this.t_timer = setInterval(this.refreshTimer, this.timer_refresh_interval);

    setTimeout(this.addUser, 1000);
    this.t_addUser = setInterval(this.addUser, this.user_refresh_interval);

    setTimeout(this.refreshUserIcon, 1000);
    this.t_icon = setInterval(this.refreshUserIcon, this.user_refresh_interval);

    setTimeout(this.refreshPrizeUser, 1000);
    this.t_prizeUserList = setInterval(this.refreshPrizeUser, this.prize_user_refresh_interval);

     this.movePrizeUser();
  },
  methods: {
    movePrizeUser(){
      let _this = this;
      setTimeout(()=>{
        let obj = _this.prizeUserList.shift();
        let aid = _this.prize_roll_arr.shift();
        _this.movePrizeUser();
      },2000)

    },
    initPage() {
      let _this = this;

      //shake regist
      let u = navigator.userAgent,
        app = navigator.appVersion;
      let isiOS = !!u.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/); //ios终端
      let shakeSpeed = 8;
      if (isiOS) {
        shakeSpeed = 30;
      }
      $(document).shake({
        shake_speed: shakeSpeed,
        time_difference: 30,
        shakeAfter: function() {
          _this.doShake();
        }
      });

      $.ajax({
        url: config.locationUrl + "/sys/getBaseConfigByType",
        dataType: "jsonp",
        data: {
          actSid: _this.actSid,
          configType: 'shake_act_base_config'
        },
        success: function(data) {
          console.log("after getBaseConfigByType");
          console.log(data);
          if (data.ret == 0) {
            //refresh public share info, title, act rule
            let ruleTip = "<p>" + data.ruleTip.replace(/\n/g, "</p><p>") + "</p>";
            _this.act_rule = ruleTip.replace(/\s/g, "&nbsp;");
            document.title = data.title;
            //_this.act_title = data.title;
          } else {
            console.log('getBaseConfigByType:', 'ret != 0');
          }
        },
        error(res) {
          console.log('getBaseConfigByType:', 'fail');
        }
      });
    },
    addUser(cb) {
      let _this = this;
      ///lottery/addParticipant
      if (_this.timerSid && userData.openid) {
        $.ajax({
          url: config.locationUrl + "/lottery/addParticipant",
          dataType: "jsonp",
          data: {
            timerSid: _this.timerSid,
            openid: userData.openid
          },
          success: function(data) {
            console.log("after addParticipant" +   new Date());
            if (data.ret == 0) {
              _this.user_count = data.amount;
            } else {
              console.log('addParticipant:', 'ret != 0');
            }
          },
          error(res) {
            console.log('addParticipant:', 'fail');
          },
          complete() {
            cb && cb();
          }
        });
      }
    },
    refreshTimer() {
      let _this = this;
      $.ajax({
        url: config.locationUrl + "/timer/getCurrTimer",
        dataType: "jsonp",
        data: {
          actSid: _this.actSid,
        },
        success: function(data) {
          console.log("after getCurrTimer");
          console.log(data);
          if (data.ret == 0) {
            if (data.timerSid) {
              _this.timerSid = data.timerSid;
              if (data.status == 1) {
                _this.toShake();
                return;
              }
              _this.isInShakingMode = false;
              if (data.status == 0) {
                // er...
                clearInterval(_this.t_countdown);
                _this.intDiff = data.leftInMs;
                _this.intDiff -= 1000;
                if (_this.intDiff <= 0) {
                  setTimeout(function() {
                    _this.toShake();
                  }, _this.intDiff + 1000);
                  return;
                }
                _this.count_hour = Math.floor(_this.intDiff / (60 * 60 * 1000)) % 24;
                _this.count_min = Math.floor(_this.intDiff / (60 * 1000)) % 60;
                _this.count_second = Math.floor(_this.intDiff / 1000) % 60;
                _this.t_countdown = setInterval(function() {
                  _this.intDiff -= 1000;
                  if (_this.intDiff <= 0) {
                    clearInterval(_this.t_countdown);
                    setTimeout(function() {
                      _this.toShake();
                    }, _this.intDiff + 1000);
                    return;
                  }
                  _this.count_hour = Math.floor(_this.intDiff / (60 * 60 * 1000)) % 24;
                  _this.count_min = Math.floor(_this.intDiff / (60 * 1000)) % 60;
                  _this.count_second = Math.floor(_this.intDiff / 1000) % 60;
                }, 1000);
                _this.toCountdown();
                _this.isShowCountbox = true;
              } else {
                _this.isShowCountbox = false; //shaking, not reachable
              }
            } else {
              _this.timerSid = ""; // any exception?
            }
          } else {
            _this.timerSid = "";
            console.log('getCurrTimer:', 'ret != 0');
            _this.isShowCountbox = false;
            _this.isInShakingMode = false;
            _this.timer_status_msg = data.ret == 2 ? "无活动或活动无效" : "摇奖已结束";
          }
        },
        error(res) {
          _this.timerSid = "";
          console.log('getCurrTimer:', 'fail');
        }
      });
    },
    refreshUserIcon() {
      let _this = this;
      if (!_this.timerSid || _this.isInShakingMode) {
        return;
      }
      $.ajax({
        type: "GET",
        url: config.locationUrl + "/lottery/getParticipantInfo",
        dataType: "jsonp",
        data: {
          timerSid: _this.timerSid
        },
        success: function(data) {
          console.log("after getParticipantInfo" + new Date());
          if (data.ret == 0) {
            if (data.rows) {

              let valid_row_count = 0;
              for(let i=data.rows.length-1;i>=0;i--){
                let content = data.rows[i];
                if($.inArray(content.openid, _this.user_roll_arr)>=0){
                  //exist
                }else{
                  valid_row_count++;
                  _this.user_roll_arr.unshift(content.openid);
                  setTimeout(function(){
                    let _length = _this.user_list.unshift(content);
                    if(_length>30){
                      _this.user_list.pop();
                      _this.user_roll_arr.pop();
                    }
                  }, 500 * valid_row_count);
                }
              }
            }
          } else {
            console.log('getParticipantInfo:', 'ret != 0');
          }
        },
        error(res) {
          console.log('getParticipantInfo:', 'fail');
        }
      });
    },
    toShake() {
      this.user_roll_arr = [];
      this.user_list = [];
      if(!this.isInShakingMode){
        this.isShowQrcode = false;
        this.isInShakingMode = true;
        this.closeRule();
        document.getElementById("voice_ding").play();
      }

      clearInterval(this.t_countdown);
    },
    toCountdown() {
      this.prizeUserList = []; //reset it
      this.prize_roll_arr=[];
    },
    closeRule() {
      this.isShowRule = false;
    },
    showRuleDlg() {
      this.isShowRule = true;
    },
    showQrcodeDlg() {
      this.isShowQrcode = true;
      if (this.isShowPrize) {
        this.isShowPrize = false
      }
    },
    closeQrcodeDlg() {
      this.isShowQrcode = false;
      if (this.isShaking) {
        this.isShaking = false
      }
    },
    showNoPrizeDlg() {
      this.isShowNoPrize = true
    },
    closeNoPrizeDlg() {
      this.isShowNoPrize = false;
      this.isShaking = false
    },
    showPrizeDlg() {
      this.isShowPrize = true
    },
    closePrizeDlg() {
      this.isShowPrize = false;
      this.isShaking = false
    },
    refreshPrizeUser() {
      // get latest 30 prizeusers
      let _this = this;
      console.log(_this.isInShakingMode + "-------isInShakingMode");
      if (!_this.isInShakingMode) {
        return; //only request in shaking mode
      }
      $.ajax({
        type: "GET",
        url: config.locationUrl + "/lottery/getPrizeUserList",
        dataType: "jsonp",
        data: {
          timerSid: _this.timerSid
        },
        success: function(data) {
          console.log("after getPrizeUserList");
          console.log(data);
          if (data.ret == 0) {
            //_this.user_count = data.amount;
            if (data.rows) {
              let new_arr = [];
              $.each(data.rows, function(iiddxx, content){
                if($.inArray(content.sid, _this.prize_roll_arr)<0) {
                  _this.prize_roll_arr.push(content.sid);
//                  new_arr.push(content);
                  new_arr.push({"sid":content.sid, "nickname": content.nickname, "head": content.head, "resourceName": content.resourceName});
                  if(_this.prize_roll_arr.length>30){
                    _this.prize_roll_arr.shift();
                    _this.prizeUserList.shift();
                  }
                }
//                  console.log(_this.prize_roll_arr);
              });
              for(let j = 0; j < new_arr.length; j++){
                  _this.prizeUserList.push(new_arr[j]);
              }
//              _this.prizeUserList= _this.prizeUserList.concat(new_arr);

              setTimeout(function(){
                let _spanTotalWidth =  25 *  _this.prize_roll_arr.length;
                $.each($(".marquee_scroll h3"),function(_spanidx, content){
                  _spanTotalWidth +=$(content).width();
                  if(_this.prize_roll_arr.length ==(_spanidx + 1)){
                    console.log("calc total:  " + _spanTotalWidth);
                    _this.marquee_width = Math.max(_spanTotalWidth, 800);
                    /*
                                       let new_seconds = 8 + Math.round(_spanTotalWidth / 120);
                                       if(_this.marquee_seconds!=new_seconds && _spanTotalWidth>0){
                                         _this.marquee_seconds = new_seconds;
                                       }
                                       console.log("calc seconds:  " + new_seconds);
                                       */
                   }
                 });

               }, 2000)

            }
          }

        },
        error(res) {
          console.log('lottery/getPrizeUserList:', 'fail');
        }
      });
    },
    doShake() {
      let _this = this;
      if (!_this.timerSid) {
        return;
      }
      console.log("in startDraw");
      if (_this.isShaking || !_this.isInShakingMode) {
        return;
      }
      document.getElementById("voice_kaka").play();
      _this.isShaking = true;
      $.ajax({
        type: "GET",
        url: config.locationUrl + "/lottery/shake",
        dataType: "jsonp",
        data: {
          openid: userData.openid,
          timerSid: _this.timerSid
        },
        success: function(data) {
          _this.lottery_result = data;
          console.log("after shake");
          if (data.ret == 0 && data.timerPrize) {
            // set prize title
            _this.prize_title = data.timerPrize.resourceName;
            _this.showPrizeDlg();
          } else {
            _this.showNoPrizeDlg();
          }

        },
        error(res) {
          console.log('lottery/shake:', 'fail');
          _this.showNoPrizeDlg();
        }
      });
    }
  }

}

</script>
