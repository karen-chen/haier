<template>
  <div class="shake_body countdown_body">
    <div class="top el-row">
      <div class="text-center el-col el-col-4"><span>{{user_count}}</span><br>参与互动
      </div>
      <div class="el-col el-col-17 el-col-offset-3">
        <div class="top_right">
          <ul v-for="(userItem, index) in user_list" :key="userItem.openid">
            <!--<li class="biandan">-->
            <!--</li>-->
            <li v-bind:class="{biandan: index==0}">
              <img src="item.head" width="200" height="200">
            </li>
          </ul>
        </div>
      </div>
    </div>
    <h2 class="title_h2">海尔家电团购会</h2>
    <div class="count_main text-center">
      <h2>{{isShowCountbox?"距离下一轮摇奖开始":"摇奖已结束"}}</h2>
      <div class="count_box" v-show="isShowCountbox">
        <span>{{count_hour}}</span>时
        <span>{{count_min}}</span>分
        <span>{{count_second}}</span>秒
      </div>
    </div>
    <div class="rule_btn" @click="showRuleDlg"></div>
    <div class="minegift_btn" @click="showQrcodeDlg"></div>
    <!--关注公众号弹框-->
    <div class="pop_mask" id="codeBox"  v-show="isShowQrcode">
      <div class="pop_box code_box">
        <h3>请在“海尔电视”公众号<br>
          菜单“我的券”中进行查看</h3>
        <span><img src="../../assets/images/pop_code.jpg"></span>
        <p>长按二维码，即可关注“海尔电视”公众号</p>
        <div class="off_btn" @click="closeQrcodeDlg">&times;</div>
      </div>
    </div>
    <!--摇奖规则弹框-->
    <div class="pop_mask" id="ruleBox"  v-show="isShowRule">
      <div class="pop_box rule_box">
        <h3>活动规则</h3>
        <div class="rule_list" v-html="act_rule">
        </div>
        <div class="off_btn" @click="closeRule">&times;</div>
      </div>
    </div>
  </div>




</template>
<style lang="scss">
  @import '../../assets/scss/_mixins.scss';
  @import '../../assets/scss/pages/_index.scss';
  @import '../../assets/scss/pages/_countdown.scss';
  @import '../../assets/scss/pages/_shake.scss';
  @import '../../assets/scss/pages/_pop.scss';
</style>
<script>

  import * as config from '@/lib/config'
  import {
    userData,
    getParam
  } from '@/lib/tools';

  export default {
    data() {
      return {
        act_rule: "",
        count_down_hour: 23,
        count_down_min: 59,
//        count_down_second: 59,
//        count_hour: 23,
//        count_min: 59,
//        count_second: 59,
        user_list: [],
        user_count: 0,
        user_refresh_interval: 6000,
        timer_refresh_interval: 13000,
        actSid: "",
        timerSid: "",
        share_info: {},
        isShowRule:false,
        t_userList :null,
        t_user :null,
        t_countdown: null,
        t_timer:null,
        intDiff:1000000000,
        isShowCountbox:false,
        isShowQrcode: false
      }
    },
    created(){
      this.actSid = getParam("actSid");
      this.initPage();

      this.refreshTimer();
      this.t_timer = setInterval(this.refreshTimer, this.user_refresh_interval);

      this.refreshUser();
      this.t_userList = setInterval(this.refreshUser, this.user_refresh_interval);

      this.t_user = setInterval(this.addUser, 30000);
      this.t_countdown = setInterval(this.countDown, 1000)
//      this.countDown();
    },

    computed:{
      count_hour: function () {
        return this.count_down_hour = Math.floor(this.intDiff / (60 * 60*1000))- (0 * 24);
      },

      count_min: function () {
        return this.count_down_min = Math.floor(this.intDiff / (60*1000)) - (0 * 24 * 60) - (this.count_down_hour * 60);
      },

      count_second: function () {
        return Math.floor(this.intDiff/1000) - (0 * 24 * 60 * 60) - (this.count_down_hour * 60 * 60) - (this.count_down_min * 60);
      }
    },
    methods:{
      initPage(){
        var _this = this;
        $.ajax({
          type: "GET",
          url: config.locationUrl + "/sys/getBaseConfigByType",
          dataType: "jsonp",
          data: {
            actSid: _this.actSid,
            configType: 'shake_act_base_config'
          },
          success: function(data) {
            console.log("after getBaseConfigByType");
            console.log(data);
            if (data.ret == 0) {
              //refresh public share info, title, act rule
              _this.act_rule = "<p>"+data.ruleTip.replace(/\n/g,"</p><p>") + "</p>";
              document.title = data.title;

              config.wxShareData.title = data.shareTitle;
              config.wxShareData.desc = data.shareDesc;
              config.wxShareData.link = data.shareUrl;
              config.wxShareData.imgUrl = config.imageServerUrl + data.shareImg;
            }else {
              console.log('getBaseConfigByType:', 'ret != 0');
            }
          },
          error(res) {
            console.log('getBaseConfigByType:', 'fail');
          }
        });
      },
      addUser(cb){
        var _this = this;
        ///lottery/addParticipant
        if(_this.timerSid && userData.openid){
          $.ajax({
            type: "GET",
            url: config.locationUrl + "/lottery/addParticipant",
            dataType: "jsonp",
            data: {
              timerSid: _this.timerSid,
              openid: userData.openid
            },
            success: function(data) {
              console.log("after getBaseConfigByType");
              console.log(data);
              if (data.ret == 0) {
                _this.user_count = data.amount;
                clearInterval(_this.t_user);
              }else {
                console.log('getBaseConfigByType:', 'ret != 0');
              }
            },
            error(res) {
              console.log('getBaseConfigByType:', 'fail');
            },complete(){
              cb && cb();
            }
          });
        }
      },
      refreshTimer(){
        var _this = this;
        $.ajax({
          type: "GET",
          url: config.locationUrl + "/timer/getCurrTimer",
          dataType: "jsonp",
          data: {
            actSid: _this.actSid,
          },
          success: function(data) {
            console.log("after getCurrTimer");
            console.log(data);
            if (data.ret == 0) {
              if(data.timerSid && data.timerSid!=_this.timerSid){
                _this.timerSid = data.timerSid;
                if(data.status==1){
                  _this.addUser(_this.toShake);//new User in this new timer
                  return;
                }else{
                  _this.addUser();//new User in this new timer
                }
                if(data.status==0){
                  clearInterval(_this.t_countdown);
                  setTimeout(function(){
                    _this.intDiff = data.leftInMs;
                    _this.t_countdown = setInterval(this.countDown, 1000)
                  }, 1000);
                  _this.isShowCountbox = true;
                }else{
                  _this.isShowCountbox = false;
                }
              }else{
                _this.timerSid="";
              }
            }else {
              _this.timerSid="";
              console.log('getCurrTimer:', 'ret != 0');
            }
          },
          error(res) {
            _this.timerSid="";
            console.log('getCurrTimer:', 'fail');
          }
        });
      },
      refreshUser(){
        var _this = this;
        $.ajax({
          type: "GET",
          url: config.locationUrl + "/lottery/getParticipantInfo",
          dataType: "jsonp",
          data: {
            timerSid: _this.timerSid
          },
          success: function(data) {
            console.log("after getParticipantInfo");
            console.log(data);
            if (data.ret == 0) {
              _this.user_count = data.amount;
              if(data.userList){
                _this.user_list = _this.user_list.concat(data.userList);
              }
            }else {
              console.log('getParticipantInfo:', 'ret != 0');
            }
          },
          error(res) {
            console.log('getParticipantInfo:', 'fail');
          }
        });
      },
      countDown(){
        var _this = this;
        if(!_this.timerSid){
          //setTimeout(_this.countDown,1000)
          return;
        }

        if(_this.count_second == 0 && _this.count_hour == 0 && _this.count_min == 0){
          this.toShake();
        }else{
          /*
          if(_this.count_second>0){
            _this.count_second--;
          }else{
            if(_this.count_min>0){
              _this.count_min--;
            }else{
              if(_this.count_hour>0){
                _this.count_hour--;
              }else{
              }
              _this.count_min=59;
            }
            _this.count_second=59;
          }
          */
          _this.intDiff-=1000;
          console.log(_this.intDiff)
        }
      },
      toShake(){
        //alert("a")
        clearInterval(this.t_user);
        clearInterval(this.t_userList);
        clearInterval(this.t_timer);
        clearInterval(this.t_countdown);

        this.$router.push({name: 'ShakeMobile', params: {timerSid: this.timerSid, actSid: this.actSid}});
      }
      , closeRule(){
        this.isShowRule = false;
      }
      , showRuleDlg(){
        this.isShowRule = true;
      }
      ,showQrcodeDlg(){
        this.isShowQrcode = true;
      }
      ,closeQrcodeDlg(){
        this.isShowQrcode = false;
      }
    }

  }
</script>
